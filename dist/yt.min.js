/*export default class YT extends HTML{
	constructor(yt_api = "../../src/plugins/YT/YoutubeApi.js",iframe_id="_YT_"+Math.random().toString(36).substring(7)){
		super();
		this._ready = false;
		this._iframe_id = iframe_id;
		delete this._player;
		this._yt_api.call(window).then(function(){
			this._createYT(iframe_id);
		}.bind(this),function(){
			throw new Error("Failed to load YoutubeApi.js");
		}.bind(this));
	}
	_yt_api(){
		return new Promise(function(resolve,reject){
			if(YT.loaded === 1) return resolve();
			if (!window['YT']) {
				this.YT = {loading: 0,loaded: 0};
			}
			if (!window['YTConfig']) {
				this.YTConfig = {'host': 'http://www.youtube.com'};
			}
			if (!YT.loading) {
				YT.loading = 1;
				(function(){
					var l = [];
					window.YT.ready = function(f) {
						if (YT.loaded) {
							f();
						} else {
							l.push(f);
						}
					};
					window.onYTReady = function() {
						YT.loaded = 1;
						for (var i = 0; i < l.length; i++) {
							try {
								l[i]();
							} catch (e) {
								console.log(e);
							}
						}
						resolve();
					};
					window.YT.setConfig = function(c) {
						for (var k in c) {
							if (c.hasOwnProperty(k)) {
								YTConfig[k] = c[k];
							}
						}
					};
					var a = document.createElement('script');
					a.type = 'text/javascript';
					a.id = 'www-widgetapi-script';
					a.src = 'https://s.ytimg.com/yts/jsbin/www-widgetapi-vflgkj_Yq/www-widgetapi.js';
					a.async = true;
					var c = document.currentScript;
					if (c) {
						var n = c.nonce || c.getAttribute('nonce');
						if (n) {
							a.setAttribute('nonce', n);
						}
					}
					var b = document.getElementsByTagName('script')[0];
					b.parentNode.insertBefore(a, b);
				})();
			}
		}.bind(this));
	}
	_createYT(){
		var div = document.createElement("div");
			div.id = this._iframe_id;
			div.style.display = "none";
			div.style.pointerEvents = "none";
			document.body.append(div);
		let player_vars = {
			height: "144",
			width: "100%",
			playerVars: {'controls': 0,'disablekb':1,'fs':0,'modestbranding':1,'playsinline':1},
			videoId: ""
		}
		window.YT.ready(function() {
			let f = function(g){
				return function(evt){
					return this[g](evt);
				}.bind(this);
			}.bind(this)
			this._player = new window.YT.Player(this._iframe_id, player_vars);
			this._player.addEventListener("onStateChange", f('_onLoad'));
			this._player.addEventListener("onStateChange", f('_onTimeUpdate'));
			this._player.addEventListener("onStateChange", f('_onStateChange'));
			this._player.addEventListener("onError", f('_onError'));
			this._player.addEventListener('onReady', f('_onReady'));
		}.bind(this));
	}
	
	_onLoad(evt){
		if(this._player.ready) return; //correctly loads the video
		switch(evt.data){
			case 5:
				this._player.setVolume(0);
				this._player.playVideo();
				break;
			case 1:
				this._player.pauseVideo();
				break;
			case 2:
				this._player.ready = true;
				this._player.setVolume(100);
				this._publish('loaded');
				break;
		}
	}
	_onTimeUpdate(evt){
		if(evt.data == 1){ //PLAYING
			this._player._myTimer = setInterval(function(){
				this._publish('timeupdate');
			}.bind(this), 250);
		}
		if(evt.data != 1){
			clearInterval(this._player._myTimer); //stop calling updateTime
		}
	}
	_onStateChange(evt){
		if(!this._player.ready) return; //correctly loads the video
		switch(evt.data){
			case -1:
				//self._publish('abort'); //not really abort
				break;
			case 0:
				this._publish('ended');
				break;
			case 3: //no idea why but it works
			case 1:
				this._publish('play');
				break;
			case 2:
				this._publish('pause');
				break;
			//case 3:
				////self._publish('buffering'); //buffering
				//break;
			case 5:
				this._publish('loaded');
				break;
		}
	}
	_onError(evt){
		this._publish('error');
	}
	_onReady(evt){
		console.log("Youtube is ready");
		this._ready = true;
		this._publish('ready');
	}
	load(track){
		if(!this.constructor._validTrack(track)) throw new Error("Invalid Filetype");
		this._player.ready = false;
		let p = this.waitForEvent('loaded');
		try{
			let id = YT.getYoutubeId(track.src);
			this._player.cueVideoById(id,0);
		}catch(error){
			this._publish('error');
		}
		return p;
	}
	pause(){
		if(this._player.getPlayerState() == 2) return Promise.resolve();
		this._player.pauseVideo();
		return this.waitForEvent('pause');
	}
	play(){
		if(this._player.getPlayerState() == 1) return Promise.resolve();
		this._player.playVideo();
		return this.waitForEvent('play');
	}
	seek(time){
		this._player.seekTo(time,true);
		let self = this;
		if(time >= this.getStatus().duration){ //?????
			return this.waitForEvent('ended');
		}
		let f = function(){
			return self.getStatus().time;
		}
		let g = this.getStatus().time;
		let c = function(){
			self._publish('timeupdate');
		};
		if(time == g) return c();
		this.wait(f,g,c,50);
		return this.waitForEvent('timeupdate');
	}
	fastForward(time){
		time += this._player.getCurrentTime();
		return this.seek(time);
	}
	setVolume(vol){
		if(vol>1) vol=1;
		if(vol<0) vol=0;
		this._player.setVolume(vol*100);
		let self = this;
		let f = function(){
			return self.getStatus().volume;
		}
		let g = this.getStatus().volume;
		let c = function(){
			self._publish('volumechange');
		};
		if(vol == g) return c();
		this.wait(f,g,c,5);
		return this.waitForEvent('volumechange');
	}
	stop(){
		return this.pause()
		.then(this.chain('seek',0));
	}
	getStatus(){
		let data = {
			src:this._player.getVideoUrl(),
			time:this._player.getCurrentTime(),
			duration:this._player.getDuration(),
			volume:this._player.getVolume()/100,
			paused:this._player.getPlayerState()!=1
		}
		return data;
	}
	destroy(){
		this._player.destroy();
		document.getElementById(this._iframe_id).remove();
		clearInterval(this._player._myTimer); //stop calling updateTime
		delete this._iframe_id;
		return super.destroy();
	}
}
YT.Track = class Track extends HTML.Track{
	constructor(obj){
		super(obj);
		this.filetype = "YT";
	}
}
YT.Track.fromJSON = function(json){
	return new YT.Track(JSON.parse(json));
}
YT.getYoutubeId = function(url){
	try{
		let tmp = new URL(url);
		if(tmp.hostname == "www.youtube.com" || tmp.hostname == "youtu.be"){
			if(tmp.pathname == "/watch"){
				let index = tmp.search.indexOf("?v=");
				return tmp.search.substr(index+3,11);
			}else{
				return tmp.pathname.substr(1,11);
			}
		}
		throw new Error("Invalid url");
	}catch(e){
		throw new Error("Invalid url");
	}
}
YT._validURL = function(url){
	try{
		let tmp = new URL(url);
		if(tmp.hostname == "www.youtube.com" || tmp.hostname == "youtu.be") return true;
		return false;
	}catch(e){
		return false;
	}
}*/
import HTML from './html.min.js';
export default class YT extends HTML{constructor(e="../../src/plugins/YT/YoutubeApi.js",t="_YT_"+Math.random().toString(36).substring(7)){super(),this._ready=!1,this._iframe_id=t,delete this._player,this._yt_api.call(window).then(function(){this._createYT(t)}.bind(this),function(){throw new Error("Failed to load YoutubeApi.js")}.bind(this))}_yt_api(){return new Promise(function(e,t){if(1===YT.loaded)return e();window.YT||(this.YT={loading:0,loaded:0}),window.YTConfig||(this.YTConfig={host:"http://www.youtube.com"}),YT.loading||(YT.loading=1,function(){var t=[];window.YT.ready=function(e){YT.loaded?e():t.push(e)},window.onYTReady=function(){YT.loaded=1;for(var r=0;r<t.length;r++)try{t[r]()}catch(e){console.log(e)}e()},window.YT.setConfig=function(e){for(var t in e)e.hasOwnProperty(t)&&(YTConfig[t]=e[t])};var r=document.createElement("script");r.type="text/javascript",r.id="www-widgetapi-script",r.src="https://s.ytimg.com/yts/jsbin/www-widgetapi-vflgkj_Yq/www-widgetapi.js",r.async=!0;var i=document.currentScript;if(i){var a=i.nonce||i.getAttribute("nonce");a&&r.setAttribute("nonce",a)}var s=document.getElementsByTagName("script")[0];s.parentNode.insertBefore(r,s)}())}.bind(this))}_createYT(){var e=document.createElement("div");e.id=this._iframe_id,e.style.display="none",e.style.pointerEvents="none",document.body.append(e);let t={height:"144",width:"100%",playerVars:{controls:0,disablekb:1,fs:0,modestbranding:1,playsinline:1},videoId:""};window.YT.ready(function(){let e=function(e){return function(t){return this[e](t)}.bind(this)}.bind(this);this._player=new window.YT.Player(this._iframe_id,t),this._player.addEventListener("onStateChange",e("_onLoad")),this._player.addEventListener("onStateChange",e("_onTimeUpdate")),this._player.addEventListener("onStateChange",e("_onStateChange")),this._player.addEventListener("onError",e("_onError")),this._player.addEventListener("onReady",e("_onReady"))}.bind(this))}_onLoad(e){if(!this._player.ready)switch(e.data){case 5:this._player.setVolume(0),this._player.playVideo();break;case 1:this._player.pauseVideo();break;case 2:this._player.ready=!0,this._player.setVolume(100),this._publish("loaded")}}_onTimeUpdate(e){1==e.data&&(this._player._myTimer=setInterval(function(){this._publish("timeupdate")}.bind(this),250)),1!=e.data&&clearInterval(this._player._myTimer)}_onStateChange(e){if(this._player.ready)switch(e.data){case-1:break;case 0:this._publish("ended");break;case 3:case 1:this._publish("play");break;case 2:this._publish("pause");break;case 5:this._publish("loaded")}}_onError(e){this._publish("error")}_onReady(e){console.log("Youtube is ready"),this._ready=!0,this._publish("ready")}load(e){if(!this.constructor._validTrack(e))throw new Error("Invalid Filetype");this._player.ready=!1;let t=this.waitForEvent("loaded");try{let t=YT.getYoutubeId(e.src);this._player.cueVideoById(t,0)}catch(e){this._publish("error")}return t}pause(){return 2==this._player.getPlayerState()?Promise.resolve():(this._player.pauseVideo(),this.waitForEvent("pause"))}play(){return 1==this._player.getPlayerState()?Promise.resolve():(this._player.playVideo(),this.waitForEvent("play"))}seek(e){this._player.seekTo(e,!0);let t=this;if(e>=this.getStatus().duration)return this.waitForEvent("ended");let r=this.getStatus().time,i=function(){t._publish("timeupdate")};return e==r?i():(this.wait(function(){return t.getStatus().time},r,i,50),this.waitForEvent("timeupdate"))}fastForward(e){return e+=this._player.getCurrentTime(),this.seek(e)}setVolume(e){e>1&&(e=1),e<0&&(e=0),this._player.setVolume(100*e);let t=this,r=this.getStatus().volume,i=function(){t._publish("volumechange")};return e==r?i():(this.wait(function(){return t.getStatus().volume},r,i,5),this.waitForEvent("volumechange"))}stop(){return this.pause().then(this.chain("seek",0))}getStatus(){return{src:this._player.getVideoUrl(),time:this._player.getCurrentTime(),duration:this._player.getDuration(),volume:this._player.getVolume()/100,paused:1!=this._player.getPlayerState()}}destroy(){return this._player.destroy(),document.getElementById(this._iframe_id).remove(),clearInterval(this._player._myTimer),delete this._iframe_id,super.destroy()}}YT.Track=class extends HTML.Track{constructor(e){super(e),this.filetype="YT"}},YT.Track.fromJSON=function(e){return new YT.Track(JSON.parse(e))},YT.getYoutubeId=function(e){try{let t=new URL(e);if("www.youtube.com"==t.hostname||"youtu.be"==t.hostname){if("/watch"==t.pathname){let e=t.search.indexOf("?v=");return t.search.substr(e+3,11)}return t.pathname.substr(1,11)}throw new Error("Invalid url")}catch(e){throw new Error("Invalid url")}},YT._validURL=function(e){try{let t=new URL(e);return"www.youtube.com"==t.hostname||"youtu.be"==t.hostname}catch(e){return!1}};
