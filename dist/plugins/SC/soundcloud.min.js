import init from './iframe-api.js';
import {Player} from '../../core.min.js';
export default class SC extends Player{static Track=class extends Player.Track{constructor(t){super(t),this.filetype="SC"}toJSON(){return super.toJSON()}static fromJSON(t){return new SC.Track(JSON.parse(t))}};constructor(t=!1){super(t),this._iframe_id="_SC_"+Math.random().toString(36).substring(7),this.constructor._SC||init(this.constructor),this._createSC()}async _createSC(t){var e=document.createElement("iframe");e.id=this._iframe_id,e.style.display="none",e.style.width="100%",e.style.height="144",e.scrolling="no",e.frameborder="no",e.allow="autoplay",e.src="https://w.soundcloud.com/player/?url="+t,document.body.append(e),this._iframe=e,this._player=this.constructor._SC.Widget(e);let i=window.SC;await new Promise(function(t,e){this._player.bind(i.Widget.Events.READY,t)}.bind(this)),this._addEventListeners(),this._ready=!0,this.publish(new this.constructor.Event("ready")),t||console.log("Soundcloud is ready")}_addEventListeners(){let t=window.SC;this._player.bind(t.Widget.Events.PLAY_PROGRESS,function(){this.publish(new this.constructor.Event("timeupdate"))}.bind(this)),this._player.bind(t.Widget.Events.PLAY,function(){this.publish(new this.constructor.Event("play"))}.bind(this)),this._player.bind(t.Widget.Events.PAUSE,function(){this.publish(new this.constructor.Event("pause"))}.bind(this)),this._player.bind(t.Widget.Events.SEEK,function(){this.publish(new this.constructor.Event("timeupdate"))}.bind(this)),this._player.bind(t.Widget.Events.FINISH,function(){this.publish(new this.constructor.Event("ended"))}.bind(this)),this._player.bind(t.Widget.Events.ERROR,function(){this.publish(new this.constructor.Event("error"))}.bind(this))}async load(t){if(!this.constructor.isValidTrack(t))throw new Error("Invalid Filetype");await this.getStatus();let e=this.waitForEvent("loaded");return await new Promise(function(e,i){let s={auto_play:!1,buying:!1,sharing:!1,download:!1,show_artwork:!1,show_playcount:!1,show_user:!1,show_comments:!1,hide_related:!0,visual:!1,start_track:0,callback:e};this._player.load(t.src,s)}.bind(this)),this.publish(new this.constructor.Event("loaded")),e}async play(){let t=this.waitForEvent("play");return this._player.play(),t}async pause(){let t=await this.getStatus(),e=this.waitForEvent("pause");return t.paused?this.publish(new this.constructor.Event("pause")):(this._player.pause(),e)}async seek(t){let e=await this.getStatus(),i=this.waitForEvent("timeupdate");return this._player.seekTo(1e3*t),t>=e.duration&&e.paused&&this.publish(new this.constructor.Event("ended")),t===e.time&&this.publish(new this.constructor.Event("timeupdate")),i}async setVolume(t){let e=await this.getStatus(),i=this.waitForEvent("volumechange");return this._player.setVolume(100*t),t!==e.volume&&await this.waitForChange(this.getStatus.bind(this),e.volume,50,"volume"),this.publish(new this.constructor.Event("volumechange")),i}async waitForChange(t,e,i=50,...s){let n=await t(...s);return n!==e?n:(await new Promise((function(t,e){setTimeout(t,i)})),this.waitForChange(t,e,i,...s))}async destroy(){let t=await super.destroy();return this._iframe.remove(),delete this._iframe_id,t}async getStatus(){let t=function(t){return new Promise(function(e,i){this._player[t](e)}.bind(this))}.bind(this),e=t("getVolume"),i=t("getPosition"),s=t("getDuration"),n=t("isPaused"),r=t("getCurrentSound"),a=await Promise.all([e,i,s,n,r]),o={};return o.volume=a[0]/100,o.time=a[1]/1e3,o.duration=a[2]/1e3,o.paused=a[3],o.src=a[4]?a[4].permalink_url:"",o.muted=!1,o}}
