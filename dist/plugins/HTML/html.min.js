import {Player} from '../../core.min.js';
export default class HTML extends Player{static Track=class extends Player.Track{constructor(t){super(t),this.filetype="HTML"}static fromJSON(t){return new HTML.Track(JSON.parse(t))}};constructor(){super(!0),this._player=new Audio;let t=function(t){return function(){this.publish(new this.constructor.Event(t))}.bind(this)}.bind(this);this._player.addEventListener("play",t("play")),this._player.addEventListener("pause",t("pause")),this._player.addEventListener("ended",t("ended")),this._player.addEventListener("error",t("error")),this._player.addEventListener("timeupdate",t("timeupdate")),this._player.addEventListener("volumechange",t("volumechange"))}async destroy(){return this._player.src="",this._player.load(),super.destroy()}async load(t){if(!this.constructor.isValidTrack(t))throw new Error("Invalid Filetype");let e=function(){this.publish(new this.constructor.Event("loaded"))}.bind(this),s=this.waitForEvent("loaded");return this._player.addEventListener("canplay",e,{once:!0}),this._player.src=t.src,s}async play(){let t=await this.getStatus(),e=this.waitForEvent("play");return t.paused||this.publish(new this.constructor.Event("play")),this._player.play(),e}async pause(){let t=await this.getStatus(),e=this.waitForEvent("pause");return t.paused&&this.publish(new this.constructor.Event("pause")),this._player.pause(),e}async seek(t){let e=await this.getStatus(),s=this.waitForEvent("timeupdate");return e.time===t&&this.publish(new this.constructor.Event("timeupdate")),this._player.currentTime=t,s}async fastForward(t){let e=await this.getStatus();return this.seek(e.time+t)}async setVolume(t){let e=await this.getStatus(),s=this.waitForEvent("volumechange");return e.volume==t&&this.publish(new this.constructor.Event("volumechange")),this._player.volume=t,s}async setMuted(t){let e=await this.getStatus(),s=this.waitForEvent("volumechange");return e.muted==t&&this.publish(new this.constructor.Event("volumechange")),this._player.muted=t,s}async stop(){return await this.pause(),await this.seek(0),this.publish(new this.constructor.Event("stop"))}async getStatus(){let t={};return t.src=this._player.currentSrc,t.time=this._player.currentTime,t.duration=this._player.duration,t.volume=this._player.volume,t.paused=this._player.paused,t.muted=this._player.muted,t}}
