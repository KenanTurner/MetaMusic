import {Track,EventTarget} from '../core.min.js';
export default class HTML extends EventTarget{constructor(){super(),this._player=new Audio;let e=function(e){return function(){this._publish(e)}.bind(this)}.bind(this);this._player.addEventListener("play",e("play")),this._player.addEventListener("pause",e("pause")),this._player.addEventListener("ended",e("ended")),this._player.addEventListener("error",e("error")),this._player.addEventListener("timeupdate",e("timeupdate")),this._player.addEventListener("volumechange",e("volumechange"))}destroy(){return"HTMLAudioElement"==this._player.constructor.name&&this._player.load(),this._ready=!1,delete this._player,delete this._subscribers,Promise.resolve()}load(e){if(!this.constructor._validTrack(e))throw new Error("Invalid Filetype");let t=function(){this._publish("loaded")}.bind(this);return this._player.addEventListener("canplay",t,{once:!0}),this._player.src=e.src,this.waitForEvent("loaded")}play(){if(!this._player.paused)return Promise.resolve(this._publish("play"));let e=this.waitForEvent("play");return this._player.play(),e}pause(){if(this._player.paused)return Promise.resolve(this._publish("pause"));let e=this.waitForEvent("pause");return this._player.pause(),e}seek(e){let t=function(){this._publish("timeupdate");let e=this.getStatus();e.time==e.duration&&this._publish("ended")}.bind(this);return this._player.addEventListener("seeked",t,{once:!0}),this._player.currentTime=e,this.waitForEvent("timeupdate")}fastForward(e){return this.seek(this._player.currentTime+e)}setVolume(e){return this._player.volume=e,this.waitForEvent("volumechange")}stop(){let e=function(){this._publish("loaded")}.bind(this);return this._player.addEventListener("canplay",e,{once:!0}),this._player.load(),this.waitForEvent("loaded")}getStatus(){return{src:this._player.currentSrc,time:this._player.currentTime,duration:this._player.duration,volume:this._player.volume,paused:this._player.paused}}wait(e,t,r,s=50){if(e()!=t)return r();let i=this;setTimeout(function(){i.wait(e,t,r,s)},s)}}HTML.Track=class e extends Track{constructor(e){super(e),this.filetype="HTML"}},HTML.Track.fromJSON=function(e){return new HTML.Track(JSON.parse(e))},HTML._validTrack=function(e){let t=this.Track.prototype.isPrototypeOf(e),r=this.name==e.filetype;return t&&r},HTML._validURL=function(e){try{let t=new URL(e).pathname.split(".").pop();switch(t=t.toUpperCase()){case"WAV":case"MP3":case"MP4":case"M4A":case"AAC":case"ADTS":case"OGG":case"OGA":case"MOGG":case"FLAC":case"WEBM":return!0}return!1}catch(e){return!1}};

