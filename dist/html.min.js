/*class HTML extends EventTarget{
	constructor(){
		super();
		this._player = new Audio();
		
		let f = function(type){
			return function(){
				this._publish(type);
			}.bind(this);
		}.bind(this);
		this._player.addEventListener('play',f('play'));
		this._player.addEventListener('pause',f('pause'));
		this._player.addEventListener('ended',f('ended'));
		this._player.addEventListener('error',f('error'));
		this._player.addEventListener('timeupdate',f('timeupdate'));
		this._player.addEventListener('volumechange',f('volumechange'));
	}
	destroy(){
		//console.log("DESTROY!!!");
		if(this._player.constructor.name == "HTMLAudioElement") this._player.load();
		this._ready = false;
		delete this._player;
		delete this._subscribers;
		return Promise.resolve();
	}
	load(track){
		if(!this.constructor._validTrack(track)) throw new Error("Invalid Filetype");
		let f = function(){
			this._publish('loaded');
		}.bind(this);
		this._player.addEventListener('canplay',f,{once:true});
		this._player.src = track.src;
		return this.waitForEvent('loaded');
	}
	play(){
		if(!this._player.paused) return this._publish('play');
		let p = this.waitForEvent('play');
		this._player.play();
		return p;
	}
	pause(){
		if(this._player.paused) return this._publish('pause');
		let p = this.waitForEvent('pause');
		this._player.pause();
		return p;
	}
	seek(time){
		let f = function(){
			this._publish('timeupdate');
			let status = this.getStatus();
			if(status.time == status.duration) this._publish('ended');
		}.bind(this);
		this._player.addEventListener('seeked',f,{once:true});
		this._player.currentTime = time;
		return this.waitForEvent('timeupdate');
	}
	fastForward(time){
		return this.seek(this._player.currentTime + time);
	}
	setVolume(vol){
		this._player.volume = vol;
		return this.waitForEvent('volumechange');
	}
	stop(){
		let f = function(){
			this._publish('loaded');
		}.bind(this);
		this._player.addEventListener('canplay',f,{once:true});
		this._player.load();
		return this.waitForEvent('loaded');
		
		//this._player.src = 'data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEAVFYAAFRWAAABAAgAZGF0YQAAAAA=';
	}
	getStatus(){
		let data = {
			src:this._player.currentSrc,
			time:this._player.currentTime,
			duration:this._player.duration,
			volume:this._player.volume,
			paused:this._player.paused
		}
		return data;
	}
	wait(f,g,callback,step=50){
		if(f() != g) return callback();
		let self = this;
		setTimeout(function(){ self.wait(f,g,callback,step)}, step);
	}
	//TODO _getHTMLAudioDuration
	//TODO upload class?
}
HTML.Track = class Track extends _Track{
	constructor(obj){
		super(obj);
		this.filetype = "HTML"; //overriding
	}
}
HTML.Track.fromJSON = function(json){
	return new HTML.Track(JSON.parse(json));
}
HTML._validTrack = function(track){
	let p = this.Track.prototype.isPrototypeOf(track);
	let f = this.name == track.filetype;
	return (p && f);
}
HTML._validURL = function(url){
	try{
		let tmp = new URL(url);
		let type = tmp.pathname.split('.').pop();
		type = type.toUpperCase();
		switch(type){
			case "WAV":
			case "MP3":
			case "MP4":
			case "M4A":
			case "AAC":
			case "ADTS":
			case "OGG":
			case "OGA":
			case "MOGG":
			case "FLAC":
			case "WEBM":
				return true;
		}
		return false;
	}catch(e){
		return false;
	}
}*/
/*class EventTarget{
	constructor(is_ready=true){
		this._subscribers = {all:[]};
		this._ready = is_ready;
	}
	subscribe(type,f,options) {
		if(typeof f != "function") throw new Error("Callback must be a function");
		let obj = {callback:f}
		if(options) obj.once = options.once;
		if(options) obj.error = options.error;
		if (!this._subscribers[type]) {
			this._subscribers[type] = []; //creates the event list
		}
		this._subscribers[type].push(obj);
		if(type == 'ready' && this._ready) this._publish('ready');
	}
	unsubscribe(type,f,options){
		if(typeof f != "function") throw new Error("Callback must be a function");
		let obj = {callback:f}
		if(options) obj.once = options.once;
		if(options) obj.error = options.error;
		if(this._subscribers[type]){
			var subs = this._subscribers[type].filter(function(item){
				return item === obj;
			});
			this._subscribers[type] = subs;
		}
	}
	_publish(type){
		if(!this._ready) return;
		let event = new this.constructor.Event(type,this.getStatus(),this);
		if(type === 'error'){
			for(let _type in this._subscribers){
				let arr = this._subscribers[_type].filter(function(obj){
					if(obj.error) obj.error(event);
					if(obj.error) return !obj.once;
					return true;
				});
				this._subscribers[_type] = arr;
			}
		}
		let f = function(obj){
			obj.callback(event);
			return !obj.once;
		}
		if(type !== 'all'){
			this._subscribers['all'] = this._subscribers['all'].filter(f);
		}
		if (!this._subscribers[type]){return;}
		this._subscribers[type] = this._subscribers[type].filter(f);
		return event;
	}
	getStatus(){ //TODO rename?
		return undefined;
	}
	waitForEvent(type) {
		return new Promise(function(resolve, reject) {
			this.subscribe(type,resolve,{once:true,error:reject});
		}.bind(this));
	}
	chain(f,...args){ //easy promise chaining
		return function(evt){
			return this[f](...args);
		}.bind(this)
	}
}
EventTarget.Event = class Event{ //TODO overhaul event inheritance
	constructor(type,data,target){
		this.type = type;
		this.data = data;
		this.target = target;
	}
}*/
/*class Track{
	constructor(obj){
		if(!obj.src || !obj.title) {
			throw new Error('Invalid Constructor');
		}
		this.filetype = "DEFAULT";
		this.src = obj.src;
		this.title = obj.title;
	}
	toJSON(){ //serialization
		let obj = {};
		obj.filetype = this.filetype;
		obj.src = this.src;
		obj.title = this.title;
		return obj;
	}
	clone(){
		return this.constructor.fromJSON(JSON.stringify(this));
	}
	equals(t){
		return JSON.stringify(this) === JSON.stringify(t);
	}
	compare(track,key="title"){
		if(this[key] < track[key]) return -1;
		if(this[key] > track[key]) return 1;
		if(this[key] === track[key]) return 0; //beware of undefined
		if(this[key] === undefined) return -1;
		if(track[key] === undefined) return 1;
		return 0; //??
	}
	toString(){
		return JSON.stringify(this);
	}
	valueOf(){
		return JSON.stringify({src:this.src,title:this.title}); //TODO?
	}
}
Track.fromJSON = function(json){ //deserialization
	return new Track(JSON.parse(json));
}*/
/*class Album extends EventTarget{
	constructor(obj){
		super();
		if(!obj.title) throw new Error('Invalid Constructor');
		this.title = obj.title;
		
		this.tracks = [];
		if(obj.tracks) this.add(...obj.tracks);
		this.sort("track_num",false,false);
	}
	add(...tracks){
		tracks.forEach(function(track){
			try{
				if(track.toJSON) track = {...{track_num:track.track_num},...track.toJSON()}; //make sure tracks are converted correctly
				let tmp = new this.constructor.players[track.filetype].Track(track);
				if(!this.constructor._validTrack(tmp)) throw new Error("Unsupported Track Type");
				tmp.track_num = track.track_num;
				this.tracks.push(tmp);
			}catch(error){
				console.log(error);
			}
		}.bind(this));
		this.sort(this.sort_key,this.sort_reversed,false);
		this._publish('add');
	}
	has(track){
		return this.tracks.some(function(t){
			if(t.equals(track)) return true;
		});
	}
	sort(key="track_num",reversed=false,_publish=true){
		this.tracks.sort(function(t1,t2){
			let val = t1.compare(t2,key);
			if(val === 0) val = t1.compare(t2,"title");
			return val;
		})
		if(reversed) this.tracks.reverse();
		this.sort_key = key;
		this.sort_reversed = reversed;
		if(_publish) this._publish('sort');
	}
	clear(){
		this.tracks.length = 0;
		this._publish('clear');
	}
	remove(track){ //TODO delete just one duplicate?
		this.tracks = this.tracks.filter(function(t){
			if(!t.equals(track)) return true;
		});
		this._publish('remove');
	}
	get length(){
		return this.tracks.length;
	}
	toJSON(){
		let obj = {};
		obj.title = this.title;
		obj.tracks = [];
		
		let old_sort_key = this.sort_key;
		this.sort("track_num",false,false);
		this.tracks.forEach(function(track,index){
			let copy = track.toJSON();
			copy.track_num = track.track_num;
			obj.tracks.push(copy);
		}.bind(this));
		this.sort(old_sort_key,false,false);
		return obj;
	}
	clone(){
		return this.constructor.fromJSON(JSON.stringify(this));
	}
	equals(t){
		return JSON.stringify(this) === JSON.stringify(t);
	}
	toString(){
		return JSON.stringify(this);
	}
	getInfo(key){
		let arr = [];
		this.tracks.forEach(function(track){
			if(track[key]) arr.push(track[key]);
		}.bind(this));
		return arr;
	}
	
	getStatus(){
		return "Overridden in album.js";
	}
}
Album.players = {};
Album._validTrack = function(track){
	return Object.values(Album.players).some(function(player){
		return player._validTrack(track);
	});
}
Album.fromJSON = function(json){ //deserialization
	let obj = JSON.parse(json);
	obj.tracks.forEach(function(track,i,arr){
		arr[i].track_num = track.track_num;
	}.bind(this))
	return new Album(obj);
}*/
import {Track,EventTarget} from './core.min.js';
export default class HTML extends EventTarget{constructor(){super(),this._player=new Audio;let e=function(e){return function(){this._publish(e)}.bind(this)}.bind(this);this._player.addEventListener("play",e("play")),this._player.addEventListener("pause",e("pause")),this._player.addEventListener("ended",e("ended")),this._player.addEventListener("error",e("error")),this._player.addEventListener("timeupdate",e("timeupdate")),this._player.addEventListener("volumechange",e("volumechange"))}destroy(){return"HTMLAudioElement"==this._player.constructor.name&&this._player.load(),this._ready=!1,delete this._player,delete this._subscribers,Promise.resolve()}load(e){if(!this.constructor._validTrack(e))throw new Error("Invalid Filetype");let t=function(){this._publish("loaded")}.bind(this);return this._player.addEventListener("canplay",t,{once:!0}),this._player.src=e.src,this.waitForEvent("loaded")}play(){if(!this._player.paused)return this._publish("play");let e=this.waitForEvent("play");return this._player.play(),e}pause(){if(this._player.paused)return this._publish("pause");let e=this.waitForEvent("pause");return this._player.pause(),e}seek(e){let t=function(){this._publish("timeupdate");let e=this.getStatus();e.time==e.duration&&this._publish("ended")}.bind(this);return this._player.addEventListener("seeked",t,{once:!0}),this._player.currentTime=e,this.waitForEvent("timeupdate")}fastForward(e){return this.seek(this._player.currentTime+e)}setVolume(e){return this._player.volume=e,this.waitForEvent("volumechange")}stop(){let e=function(){this._publish("loaded")}.bind(this);return this._player.addEventListener("canplay",e,{once:!0}),this._player.load(),this.waitForEvent("loaded")}getStatus(){return{src:this._player.currentSrc,time:this._player.currentTime,duration:this._player.duration,volume:this._player.volume,paused:this._player.paused}}wait(e,t,r,s=50){if(e()!=t)return r();let i=this;setTimeout(function(){i.wait(e,t,r,s)},s)}}HTML.Track=class extends Track{constructor(e){super(e),this.filetype="HTML"}},HTML.Track.fromJSON=function(e){return new HTML.Track(JSON.parse(e))},HTML._validTrack=function(e){let t=this.Track.prototype.isPrototypeOf(e),r=this.name==e.filetype;return t&&r},HTML._validURL=function(e){try{let t=new URL(e).pathname.split(".").pop();switch(t=t.toUpperCase()){case"WAV":case"MP3":case"MP4":case"M4A":case"AAC":case"ADTS":case"OGG":case"OGA":case"MOGG":case"FLAC":case"WEBM":return!0}return!1}catch(e){return!1}};

